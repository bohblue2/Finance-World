{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import random\n",
    "\n",
    "# import gym\n",
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "from torch.distributions import Normal\n",
    "\n",
    "from IPython.display import clear_output\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "use_cuda = torch.cuda.is_available()\n",
    "device   = torch.device(\"cuda\" if use_cuda else \"cpu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining Ingredient of RL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replay buffer\n",
    "class ReplayBuffer:\n",
    "    def __init__(self, capacity):\n",
    "        self.capacity = capacity\n",
    "        self.buffer = []\n",
    "        self.position = 0\n",
    "    \n",
    "    def push(self, state, action, reward, next_state, done, t):\n",
    "        if len(self.buffer) < self.capacity:\n",
    "            self.buffer.append(None)\n",
    "        self.buffer[self.position] = (state, action, reward, next_state, done, t)\n",
    "        self.position = (self.position + 1) % self.capacity\n",
    "    \n",
    "    def sample(self, batch_size):\n",
    "        batch = random.sample(self.buffer, batch_size)\n",
    "        state, action, reward, next_state, done, t = map(np.stack, zip(*batch))\n",
    "        return state, action, reward, next_state, done, t\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.buffer)\n",
    "\n",
    "class NaivePrioritizedBuffer(object):\n",
    "    def __init__(self, capacity, prob_alpha=0.6):\n",
    "        self.prob_alpha = prob_alpha\n",
    "        self.capacity   = capacity\n",
    "        self.buffer     = []\n",
    "        self.pos        = 0\n",
    "        self.priorities = np.zeros((capacity,), dtype=np.float32)\n",
    "    \n",
    "    def push(self, state, action, reward, next_state, done , t):\n",
    "#         assert state.ndim == next_state.ndim\n",
    "        state      = np.expand_dims(state, 0)\n",
    "        next_state = np.expand_dims(next_state, 0)\n",
    "        \n",
    "        max_prio = self.priorities.max() if self.buffer else 1.0\n",
    "        \n",
    "        if len(self.buffer) < self.capacity:\n",
    "            self.buffer.append((state, action, reward, next_state, done, t))\n",
    "        else:\n",
    "            self.buffer[self.pos] = (state, action, reward, next_state, done, t)\n",
    "        \n",
    "        self.priorities[self.pos] = max_prio\n",
    "        self.pos = (self.pos + 1) % self.capacity\n",
    "    \n",
    "    def sample(self, batch_size, beta=0.4):\n",
    "        if len(self.buffer) == self.capacity:\n",
    "            prios = self.priorities\n",
    "        else:\n",
    "            prios = self.priorities[:self.pos]\n",
    "        \n",
    "        probs  = prios ** self.prob_alpha\n",
    "        probs /= probs.sum()\n",
    "        \n",
    "        indices = np.random.choice(len(self.buffer), batch_size, p=probs)\n",
    "        samples = [self.buffer[idx] for idx in indices]\n",
    "        \n",
    "        total    = len(self.buffer)\n",
    "        weights  = (total * probs[indices]) ** (-beta)\n",
    "        weights /= weights.max()\n",
    "        weights  = np.array(weights, dtype=np.float32)\n",
    "        \n",
    "        batch       = list(zip(*samples))\n",
    "        states      = np.concatenate(batch[0])\n",
    "        actions     = batch[1]\n",
    "        rewards     = batch[2]\n",
    "        next_states = np.concatenate(batch[3])\n",
    "        dones       = batch[4]\n",
    "        t           = batch[5]\n",
    "        return states, actions, rewards, next_states, dones, indices, weights, t\n",
    "    \n",
    "    def update_priorities(self, batch_indices, batch_priorities):\n",
    "        for idx, prio in zip(batch_indices, batch_priorities):\n",
    "            self.priorities[idx] = prio\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.buffer)\n",
    "\n",
    "# Plot (losses = [mean_loss, std_loss, z_loss, v_loss, q_1_loss, q_2_loss, policy_loss_with_reg])\n",
    "def plot(iteration, losses, rewards):\n",
    "    clear_output(True)\n",
    "    \n",
    "    plt.figure(figsize=(20,5))\n",
    "    plt.subplot(121)\n",
    "    plt.title('iter %s. reward: %s' % (iteration, rewards[-1]))\n",
    "    plt.plot(rewards)\n",
    "    \n",
    "    plt.subplot(122)\n",
    "    plt.title('iter %s. Policy loss with reg: %s' % (iteration, losses['policy_loss_with_reg'][-1]))\n",
    "    plt.plot(losses['policy_loss_with_reg'])\n",
    "    \n",
    "    plt.show()\n",
    "#     plt.figure(figsize=(20,5))\n",
    "#     plt.subplot(131)\n",
    "#     plt.title('frame %s. reward: %s' % (frame_idx, rewards[-1]))\n",
    "#     plt.plot(rewards)\n",
    "#     plt.show()\n",
    "    \n",
    "#     fig = plt.figure(figsize=(15,30))\n",
    "    fig = plt.figure(figsize=(20, 5))\n",
    "    # plt.rcParams['figure.figsize'] = [15, 30]\n",
    "    i = 1\n",
    "    \n",
    "    losses_copy = losses.copy()\n",
    "    losses_copy.pop('policy_loss_with_reg')\n",
    "    for key, value in losses_copy.items():\n",
    "        ax = fig.add_subplot(2, 3, i)\n",
    "        ax.set_title(key, fontdict={'family':'serif', 'color':'darkred' })\n",
    "        ax.set_xlabel('iteration', fontdict={'size':7})\n",
    "        ax.set_ylabel('loss', fontdict={'size':7})\n",
    "        ax.plot(value)\n",
    "        fig.subplots_adjust(hspace = 1)\n",
    "        i += 1\n",
    "    plt.show()\n",
    "\n",
    "# test_env\n",
    "def test_env(vis=False):\n",
    "    state = env.reset()\n",
    "    if vis: env.render()\n",
    "    done = False\n",
    "    total_reward = 0\n",
    "    while not done:\n",
    "        action = policy_net.get_action(state)\n",
    "        next_state, reward, done, _ = env.step(action)\n",
    "        state = next_state\n",
    "        if vis: env.render()\n",
    "        total_reward += reward\n",
    "    return total_reward\n",
    "\n",
    "# Value Network (Critic)\n",
    "class ValueNetwork(nn.Module):\n",
    "    def __init__(self, state_dim, hidden_dim, init_w=3e-3):\n",
    "        super(ValueNetwork, self).__init__()\n",
    "        \n",
    "        self.linear1 = nn.Linear(state_dim + 1, hidden_dim)\n",
    "        self.linear2 = nn.Linear(hidden_dim, hidden_dim)\n",
    "        self.linear3 = nn.Linear(hidden_dim, 1)\n",
    "        \n",
    "        self.linear3.weight.data.uniform_(-init_w, init_w)\n",
    "        self.linear3.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "    def forward(self, state, t):\n",
    "        x = torch.cat([state,t],1)\n",
    "        x = F.relu(self.linear1(x))\n",
    "        x = F.relu(self.linear2(x))\n",
    "        x = self.linear3(x)\n",
    "        return x\n",
    "\n",
    "# Soft Q Network (Critic)\n",
    "class SoftQNetwork(nn.Module):\n",
    "    def __init__(self, num_inputs, num_actions, hidden_size, init_w=3e-3):\n",
    "        super(SoftQNetwork, self).__init__()\n",
    "        \n",
    "        self.linear1 = nn.Linear(num_inputs + num_actions + 1, hidden_size)\n",
    "        self.linear2 = nn.Linear(hidden_size, hidden_size)\n",
    "        self.linear3 = nn.Linear(hidden_size, 1)\n",
    "        \n",
    "        self.linear3.weight.data.uniform_(-init_w, init_w)\n",
    "        self.linear3.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "    def forward(self, state, action, t):\n",
    "        x = torch.cat([state, action, t], 1)\n",
    "        x = F.relu(self.linear1(x))\n",
    "        x = F.relu(self.linear2(x))\n",
    "        x = self.linear3(x)\n",
    "        return x\n",
    "\n",
    "class LSTMPolicyNetwork(nn.Module):\n",
    "    def __init__(self, input_size, batch_size, num_actions, hidden_size, num_layers=2, log_std_min=-20, log_std_max=1.8):\n",
    "        super(NeuralNet, self).__init__()\n",
    "\n",
    "        self.h0 = torch.randn(num_layers*1, batch_size, hidden_size)\n",
    "        self.c0 = torch.randn(num_layers*1, batch_size, hidden_size)\n",
    "        \n",
    "        self.lstm = nn.LSTM(input_size, hidden_size, \n",
    "                            num_layers=num_layers, bias=True, batch_first=True, dropout=0.4) # B,T,D\n",
    "        \n",
    "        self.softplus = nn.Softplus()\n",
    "        \n",
    "        self.mean_linear = nn.Linear(hidden_size*1, num_actions) # H*1 -> 1\n",
    "        self.log_std_linear = nn.Linear(hidden_size*1, num_actions)\n",
    "        \n",
    "        self.mean_linear.weight.data.uniform_(-init_w, init_w)\n",
    "        self.mean_linear.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "        self.log_std_linear = nn.Linear(hidden_size, num_actions)\n",
    "        self.log_std_linear.weight.data.uniform_(-init_w, init_w)\n",
    "        self.log_std_linear.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "    def forward(self, state):\n",
    "        output, _ = self.lstm(state, (self.h0, self.c0)) # (B, T, 2*H)\n",
    "        output = self.softplus(output)\n",
    "        \n",
    "        mu = self.linear(output)\n",
    "        mu = mu.squeeze(-1).t() # (B, input_dim)\n",
    "        \n",
    "        log_std = self.linear_logstd(output)\n",
    "        log_std = log_std.squeeze(-1).t()# (B, input_dim)\n",
    "        log_std = torch.clamp(log_std, self.log_std_min, self.log_std_max)\n",
    "\n",
    "        return mu, log_std    \n",
    "\n",
    "     def evaluate(self, state, epsilon=1e-6):\n",
    "        \n",
    "        mean, log_std = self.forward(state) # 여기선 state가 (100,)으로 들어감\n",
    "        std = log_std.exp()\n",
    "        \n",
    "        normal = Normal(mean, std)\n",
    "        z = normal.rsample() # u를 bounding 안 하고 그대로 사용\n",
    "        \n",
    "        action = torch.empty_like(z)\n",
    "        logjacobian = torch.empty_like(z)\n",
    "        for n in range(batch_size):\n",
    "            action[n] = F.hardtanh(z[n], min_val = 0.1, max_val = float(state[n]))\n",
    "            \n",
    "            if  0.1 < z[n] < float(state[n]):\n",
    "                logjacobian[n] = torch.log(torch.Tensor([1])) # 0\n",
    "            else:\n",
    "                logjacobian[n] = torch.log(torch.Tensor([0.0001])) # log 0은 무한대라 어느 정도의 penalty를 주는 걸로 고려\n",
    "       \n",
    "    # z = normal.rsample()\n",
    "#        action = torch.tanh(z)\n",
    "        \n",
    "#        log_prob = normal.log_prob(z) - torch.log(1 - action.pow(2) + epsilon) # SAC 논문보자\n",
    "\n",
    "        log_prob = normal.log_prob(z) - logjacobian\n",
    "        \n",
    "        log_prob = log_prob.sum(-1, keepdim=True)\n",
    "        \n",
    "        return action, log_prob, z , mean, log_std # Original : 3번째에 z들어감\n",
    "        \n",
    "    \n",
    "    def get_action(self, state):\n",
    "        state = torch.Tensor(state).unsqueeze(0).to(device)\n",
    "#        policy = self.forward(state)\n",
    "#        _, action = torch.max(policy)\n",
    "        mean, log_std = self.forward(state)\n",
    "        std = log_std.exp()\n",
    "        \n",
    "        normal = Normal(mean, std)\n",
    "        \n",
    "        z = normal.sample()\n",
    "        action = F.hardtanh(z, min_val = 0.1, max_val = float(state)) \n",
    "#        z      = normal.sample()\n",
    "#        action = torch.tanh(z)\n",
    "        \n",
    "        action  = action.detach().cpu().numpy()\n",
    "        return action[0] # action\n",
    "    \n",
    "# PolicyNetwork (Actor)\n",
    "class PolicyNetwork(nn.Module):\n",
    "    def __init__(self, num_inputs, num_actions, hidden_size, init_w=3e-3, log_std_min=-20, log_std_max=1.8): #log_std_max=2\n",
    "        super(PolicyNetwork, self).__init__()\n",
    "        \n",
    "        self.log_std_min = log_std_min\n",
    "        self.log_std_max = log_std_max\n",
    "        \n",
    "        self.linear1 = nn.Linear(num_inputs, hidden_size)\n",
    "        self.linear2 = nn.Linear(hidden_size, hidden_size) # nn.Linear(hidden_size, num_actions)\n",
    "        \n",
    "        self.mean_linear = nn.Linear(hidden_size, num_actions)\n",
    "        self.mean_linear.weight.data.uniform_(-init_w, init_w)\n",
    "        self.mean_linear.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "        self.log_std_linear = nn.Linear(hidden_size, num_actions)\n",
    "        self.log_std_linear.weight.data.uniform_(-init_w, init_w)\n",
    "        self.log_std_linear.bias.data.uniform_(-init_w, init_w)\n",
    "        \n",
    "    def forward(self, state):\n",
    "        x = F.relu(self.linear1(state))\n",
    "        x = F.relu(self.linear2(x))\n",
    "#        policy = F.softmax(x)\n",
    "        \n",
    "        mean    = self.mean_linear(x)\n",
    "        log_std = self.log_std_linear(x)\n",
    "        log_std = torch.clamp(log_std, self.log_std_min, self.log_std_max)\n",
    "        \n",
    "        return mean, log_std # policy\n",
    "    \n",
    "    def evaluate(self, state, epsilon=1e-6):\n",
    "        \n",
    "        mean, log_std = self.forward(state) # 여기선 state가 (100,)으로 들어감\n",
    "        std = log_std.exp()\n",
    "        \n",
    "        normal = Normal(mean, std)\n",
    "        z = normal.rsample() # u를 bounding 안 하고 그대로 사용\n",
    "        \n",
    "        action = torch.empty_like(z)\n",
    "        logjacobian = torch.empty_like(z)\n",
    "        for n in range(batch_size):\n",
    "            action[n] = F.hardtanh(z[n], min_val = 0.1, max_val = float(state[n]))\n",
    "            \n",
    "            if  0.1 < z[n] < float(state[n]):\n",
    "                logjacobian[n] = torch.log(torch.Tensor([1])) # 0\n",
    "            else:\n",
    "                logjacobian[n] = torch.log(torch.Tensor([0.0001])) # log 0은 무한대라 어느 정도의 penalty를 주는 걸로 고려\n",
    "       \n",
    "    # z = normal.rsample()\n",
    "#        action = torch.tanh(z)\n",
    "        \n",
    "#        log_prob = normal.log_prob(z) - torch.log(1 - action.pow(2) + epsilon) # SAC 논문보자\n",
    "\n",
    "        log_prob = normal.log_prob(z) - logjacobian\n",
    "        log_prob = log_prob.sum(-1, keepdim=True)\n",
    "        \n",
    "        return action, log_prob, z , mean, log_std # Original : 3번째에 z들어감\n",
    "        \n",
    "    \n",
    "    def get_action(self, state):\n",
    "        state = torch.Tensor(state).unsqueeze(0).to(device)\n",
    "#        policy = self.forward(state)\n",
    "#        _, action = torch.max(policy)\n",
    "        mean, log_std = self.forward(state)\n",
    "        std = log_std.exp()\n",
    "        \n",
    "        normal = Normal(mean, std)\n",
    "        \n",
    "        z = normal.sample()\n",
    "        action = F.hardtanh(z, min_val = 0.1, max_val = float(state)) \n",
    "#        z      = normal.sample()\n",
    "#        action = torch.tanh(z)\n",
    "        \n",
    "        action  = action.detach().cpu().numpy()\n",
    "        return action[0] # action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Policy function update following MPC\n",
    "def MPC_update(batch_size, \n",
    "           beta,\n",
    "           gamma=0.99,\n",
    "           mean_lambda=1e-3,\n",
    "           std_lambda=1e-3,\n",
    "           z_lambda=1e-3,\n",
    "           soft_tau=1e-2\n",
    "          ):\n",
    "    # sample from replay buffer\n",
    "#     state, action, reward, next_state, done = replay_buffer.sample(batch_size)\n",
    "    state, action, reward, next_state, done, indices, weights = replay_buffer.sample(batch_size, beta) \n",
    "\n",
    "    state      = torch.Tensor(state).unsqueeze(1).to(device)\n",
    "    next_state = torch.Tensor(next_state).unsqueeze(1).to(device)\n",
    "    action     = torch.Tensor(action).unsqueeze(1).to(device)\n",
    "    reward     = torch.Tensor(reward).unsqueeze(1).to(device)\n",
    "    done       = torch.Tensor(np.float32(done)).unsqueeze(1).to(device)\n",
    "    weights    = torch.Tensor(weights).unsqueeze(1).to(device)\n",
    "    \n",
    "    \n",
    "    # calculate loss for v\n",
    "    # Jv = E_{s_t}[0.5*(V(s_t) - E_{a_t}[Q_min(s_t, a_t) - log(policy(a_t|s_t))])^2]\n",
    "    # where s_t in D and a_t ~ policy\n",
    "    new_action, log_prob, z, mean, log_std = policy_net.evaluate(state)\n",
    "    \n",
    "    optimal_v = V_B(t, next_state) # 원래는 Neural Net\n",
    "    \n",
    "    # calculate loss for policy\n",
    "    # Jpoilicy = E_{s_t, eps_t}[log(policy(reparam(eps_t;s_t)|s_t)) - Q(s_t, reparam(eps_t;s_t))]\n",
    "    # where s_t in D, eps_t ~ N(0,1), reparam(.)=the reparameterized policy using a neural network\n",
    "    policy_loss = -(log_prob + optimal_v.detach())*weights # -Q =  - V - log(pi)  => exp(-Q) = exp(-V) - pi\n",
    "    \n",
    "    prios = policy_loss + 1e-5\n",
    "    replay_buffer.update_priorities(indices, prios.data.cpu().numpy())\n",
    "    \n",
    "    policy_loss = policy_loss.mean()\n",
    "    \n",
    "    mean_loss = mean_lambda * mean.pow(2).mean()\n",
    "    std_loss  = std_lambda  * log_std.pow(2).mean()\n",
    "    z_loss    = z_lambda    * z.pow(2).sum(1).mean()\n",
    "#     action_loss = z_lambda    * action.pow(2).sum(1).mean()\n",
    "    \n",
    "    regulation = mean_loss + std_loss + z_loss\n",
    "\n",
    "    policy_loss_with_reg = policy_loss + regulation  \n",
    "    \n",
    "    # update networks\n",
    "    policy_optimizer.zero_grad()\n",
    "    policy_loss_with_reg.backward()\n",
    "    policy_optimizer.step()\n",
    "    \n",
    "    \n",
    "    # update target network\n",
    "#     for target_param, param in zip(target_v_net.parameters(), v_net.parameters()):\n",
    "#         target_param.data.copy_(target_param.data * (1.0 - soft_tau) + param.data * soft_tau)\n",
    "    \n",
    "    loss_list = [mean_loss.detach().numpy(), std_loss.detach().numpy(), z_loss.detach().numpy(),\n",
    "                 policy_loss_with_reg.detach().numpy()]\n",
    "    \n",
    "    return loss_list\n",
    "\n",
    "def soft_q_update(batch_size, \n",
    "           beta,\n",
    "           gamma=0.99,\n",
    "           mean_lambda=1e-3,\n",
    "           std_lambda=1e-3,\n",
    "           z_lambda=1e-3,\n",
    "           soft_tau= 5e-3 #1e-2,\n",
    "          ):\n",
    "    # sample from replay buffer\n",
    "#     state, action, reward, next_state, done = replay_buffer.sample(batch_size)\n",
    "    state, action, reward, next_state, done, indices, weights, t = replay_buffer.sample(batch_size, beta) \n",
    "\n",
    "    state      = torch.Tensor(state).unsqueeze(1).to(device)\n",
    "    next_state = torch.Tensor(next_state).unsqueeze(1).to(device)\n",
    "    action     = torch.Tensor(action).unsqueeze(1).to(device)\n",
    "    reward     = torch.Tensor(reward).unsqueeze(1).to(device)\n",
    "    done       = torch.Tensor(np.float32(done)).unsqueeze(1).to(device)\n",
    "    weights    = torch.Tensor(weights).unsqueeze(1).to(device)\n",
    "    t          = torch.Tensor(t).unsqueeze(1).to(device)\n",
    "    \n",
    "    \n",
    "    # calculate loss for v\n",
    "    # Jv = E_{s_t}[0.5*(V(s_t) - E_{a_t}[Q_min(s_t, a_t) - log(policy(a_t|s_t))])^2]\n",
    "    # where s_t in D and a_t ~ policy\n",
    "    new_action, log_prob, z, mean, log_std = policy_net.evaluate(state)\n",
    "    \n",
    "    expected_new_q_1 = soft_q_1_net(state, new_action, t)\n",
    "    expected_new_q_2 = soft_q_2_net(state, new_action, t)\n",
    "    expected_new_q_min = torch.min(expected_new_q_1, expected_new_q_2)\n",
    "    \n",
    "    expected_v   = v_net(state, t)\n",
    "    target_v = expected_new_q_min - log_prob\n",
    "    v_loss = v_criterion(expected_v, target_v.detach()) # MSELoss\n",
    "    \n",
    "    # calculate loss for soft_q_i where i in {1,2}\n",
    "    # Jq = E_{s_t, a_t}[0.5*(Q(s_t, a_t) - (r_t + gamma*E_{s_{t+1}}[V_target(s_{t+1})]))^2]\n",
    "    # where (s_t, a_t, s_t{t+1}) in D\n",
    "    expected_q_1 = soft_q_1_net(state, action, t)\n",
    "    expected_q_2 = soft_q_2_net(state, action, t)\n",
    "    \n",
    "    target_v = target_v_net(next_state, t)\n",
    "    target_q = reward + (1 - done)*gamma*target_v\n",
    "    \n",
    "#     q_1_loss = soft_q_criterion(expected_q_1, target_q.detach()) # MSELoss\n",
    "#     q_2_loss = soft_q_criterion(expected_q_2, target_q.detach()) # MSELoss\n",
    "    \n",
    "    q_1_loss = (expected_q_1 - target_q.detach()).pow(2) * weights\n",
    "    q_2_loss = (expected_q_2 - target_q.detach()).pow(2) * weights\n",
    "\n",
    "    prios = q_1_loss + 1e-5\n",
    "    replay_buffer.update_priorities(indices, prios.data.cpu().numpy())\n",
    "    \n",
    "    q_1_loss  = q_1_loss.mean()\n",
    "    q_2_loss = q_2_loss.mean()\n",
    " \n",
    "    \n",
    "    # calculate loss for policy\n",
    "    # Jpoilicy = E_{s_t, eps_t}[log(policy(reparam(eps_t;s_t)|s_t)) - Q(s_t, reparam(eps_t;s_t))]\n",
    "    # where s_t in D, eps_t ~ N(0,1), reparam(.)=the reparameterized policy using a neural network\n",
    "    policy_loss = (log_prob - expected_new_q_min).mean() # negative value function (-V =  A - Q)을 최소화하는 것!\n",
    "    \n",
    "    mean_loss = mean_lambda * mean.pow(2).mean()\n",
    "    std_loss  = std_lambda  * log_std.pow(2).mean()\n",
    "    z_loss    = z_lambda    * z.pow(2).sum(1).mean()\n",
    "#     action_loss = z_lambda    * action.pow(2).sum(1).mean()\n",
    "    \n",
    "    regulation = mean_loss + std_loss + z_loss\n",
    "\n",
    "    policy_loss_with_reg = policy_loss + regulation  \n",
    "    \n",
    "    # update networks\n",
    "    v_optimizer.zero_grad()\n",
    "    v_loss.backward()\n",
    "    v_optimizer.step()\n",
    "    \n",
    "    soft_q_1_optimizer.zero_grad()\n",
    "    q_1_loss.backward()\n",
    "    soft_q_1_optimizer.step()\n",
    "    \n",
    "    soft_q_2_optimizer.zero_grad()\n",
    "    q_2_loss.backward()\n",
    "    soft_q_2_optimizer.step()\n",
    "    \n",
    "    policy_optimizer.zero_grad()\n",
    "    policy_loss_with_reg.backward()\n",
    "    policy_optimizer.step()\n",
    "    \n",
    "    \n",
    "    # update target network\n",
    "    for target_param, param in zip(target_v_net.parameters(), v_net.parameters()):\n",
    "        target_param.data.copy_(target_param.data * (1.0 - soft_tau) + param.data * soft_tau)\n",
    "    \n",
    "    loss_list = [mean_loss.detach().numpy(), std_loss.detach().numpy(), z_loss.detach().numpy(),\n",
    "                  v_loss.detach().numpy(), q_1_loss.detach().numpy(), q_2_loss.detach().numpy(),\n",
    "                  policy_loss_with_reg.detach().numpy()]\n",
    "    \n",
    "    return loss_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x17929e104a8>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "beta_start = 0.4\n",
    "beta_frames = 1000 \n",
    "beta_by_frame = lambda frame_idx: min(1.0, beta_start + frame_idx * (1.0 - beta_start) / beta_frames)\n",
    "plt.plot([beta_by_frame(i) for i in range(10000)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting for RL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "action_dim = 1\n",
    "state_dim = 1\n",
    "hidden_dim = 200 # 100\n",
    "\n",
    "v_net        = ValueNetwork(state_dim, hidden_dim).to(device)\n",
    "target_v_net = ValueNetwork(state_dim, hidden_dim).to(device)\n",
    "\n",
    "# target_v의 initial parameter를 v와 같게 맞춰주는 작업\n",
    "for target_param, param in zip(target_v_net.parameters(), v_net.parameters()):\n",
    "    target_param.data.copy_(param.data)\n",
    "\n",
    "soft_q_1_net = SoftQNetwork(state_dim, action_dim, hidden_dim).to(device)\n",
    "soft_q_2_net = SoftQNetwork(state_dim, action_dim, hidden_dim).to(device)\n",
    "policy_net = PolicyNetwork(state_dim, action_dim, hidden_dim).to(device)\n",
    "\n",
    "v_criterion  = nn.MSELoss()\n",
    "soft_q_criterion = nn.MSELoss()\n",
    "\n",
    "# v_lr  = 3e-4\n",
    "# soft_q_lr = 6e-5#3e-4\n",
    "# policy_lr = 3e-4\n",
    "\n",
    "# v_optimizer  = optim.Adam(v_net.parameters(), lr=v_lr)\n",
    "# soft_q_1_optimizer = optim.Adam(soft_q_1_net.parameters(), lr=soft_q_lr)\n",
    "# soft_q_2_optimizer = optim.Adam(soft_q_2_net.parameters(), lr=soft_q_lr)\n",
    "# policy_optimizer = optim.Adam(policy_net.parameters(), lr=policy_lr)\n",
    "\n",
    "\n",
    "replay_buffer_size = 300000 # 1000000\n",
    "# replay_buffer = ReplayBuffer(replay_buffer_size)\n",
    "replay_buffer = NaivePrioritizedBuffer(replay_buffer_size)\n",
    "\n",
    "# max_iteration  = 70000\n",
    "# max_steps   = 500\n",
    "\n",
    "# enviroment_step = 1\n",
    "# gradient_step = 1\n",
    "\n",
    "iteration   = 0\n",
    "rewards     = []\n",
    "losses = {\"mean_loss\": [],\n",
    "         \"std_loss\": [],\n",
    "         \"z_loss\": [],\n",
    "         \"v_loss\": [],\n",
    "         \"q_1_loss\": [],\n",
    "         \"q_2_loss\": [],\n",
    "         \"policy_loss_with_reg\": []}\n",
    "batch_size  = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting for Environment & Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def U(C):\n",
    "    utility = 1 / gamma * np.exp(-rho * t) * C**gamma\n",
    "#    utility = 1 / gamma * (np.exp(gamma*C)-1)\n",
    "    return utility * 1e+1\n",
    "\n",
    "\n",
    "def f_B(t):\n",
    "    ds = 0.01\n",
    "    T_tilde = 110\n",
    "    value = 0\n",
    "    for s in np.arange(t, T_tilde, ds):\n",
    "        w_s = np.exp(-rho*s/(1-gamma))\n",
    "        tmp = (10**(beta + delta*s - 10)- 10**(beta + delta*t - 10))/(delta * np.log(10))\n",
    "        value += np.exp(- tmp + gamma/(1-gamma) * phi *(s-t)) * w_s * ds\n",
    "    return value\n",
    "\n",
    "def V_B(t, x):\n",
    "    f_b = f_B(t)\n",
    "    value_fcn = 1/gamma * f_b **(1-gamma) * x **gamma\n",
    "    return value_fcn * 1e+1\n",
    "\n",
    "\n",
    "alpha_ = [0.05, 0.07]\n",
    "sigma_ = [0.2, 0.25]\n",
    "\n",
    "theta = 0\n",
    "beta = 4.59364\n",
    "delta = 0.05032\n",
    "\n",
    "r = 0.02\n",
    "gamma = -3.#-3\n",
    "\n",
    "rho = 0.04 # impatience factor\n",
    "\n",
    "cov_matrix = np.array([[sigma_[0]*sigma_[0]*1, sigma_[0]*sigma_[1]*0.5],\n",
    "                       [sigma_[1]*sigma_[0]*0.5, sigma_[1]*sigma_[1]*1]])\n",
    "cov_inv = np.linalg.inv(cov_matrix)\n",
    "theta_opt0 = (cov_inv[0][0]*(alpha_[0]-r) + cov_inv[0][1] * (alpha_[1]-r)) \\\n",
    "            / ((cov_inv[0][0]*(alpha_[0]-r) + (cov_inv[0][1] * (alpha_[1]-r))) + \\\n",
    "               (cov_inv[1][0] * (alpha_[0]-r) +(cov_inv[1][1]*(alpha_[1]-r)))) # 0.33333333333333326\n",
    "\n",
    "theta_opt1 = 1 -theta_opt0 # 0.6666666666666667\n",
    "\n",
    "alpha = theta_opt0*alpha_[0] + theta_opt1*alpha_[1]\n",
    "sigma = np.sqrt(theta_opt0*theta_opt0*(sigma_[0]*sigma_[0]*1) + \\\n",
    "        theta_opt0*theta_opt1*(sigma_[0]*sigma_[1]*0.5) + \\\n",
    "        theta_opt1*theta_opt1*(sigma_[1]*sigma_[1]*1) + \\\n",
    "        theta_opt0*theta_opt1*(sigma_[0]*sigma_[1]*0.5))\n",
    "\n",
    "X0 = 225.\n",
    "g_B = 0\n",
    "pi_opt = (alpha-r)/(sigma**2 *(1-gamma)) * (X0 + g_B)/X0\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Asset = np.empty(21)\n",
    "Asset_stack = []\n",
    "C_stack = []\n",
    "\n",
    "dt = 1\n",
    "\n",
    "t0 = 70\n",
    "y=70\n",
    "\n",
    "def mu(t):\n",
    "    value = (10**(beta + delta*(t+dt) - 10)- 10**(beta + delta*t - 10))/(delta * np.log(10))\n",
    "    return value\n",
    "\n",
    "phi = r + (alpha -r)**2 / (2 * sigma**2 * (1-gamma))\n",
    "rho = 0.04\n",
    "#%%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Original  Off-policy training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "v_lr  = 3e-4\n",
    "soft_q_lr = 6e-5#3e-4\n",
    "policy_lr = 3e-4\n",
    "max_iteration = 30000\n",
    "\n",
    "v_optimizer  = optim.Adam(v_net.parameters(), lr=v_lr)\n",
    "soft_q_1_optimizer = optim.Adam(soft_q_1_net.parameters(), lr=3e-4)\n",
    "soft_q_2_optimizer = optim.Adam(soft_q_2_net.parameters(), lr=soft_q_lr)\n",
    "policy_optimizer = optim.Adam(policy_net.parameters(), lr=policy_lr)\n",
    "\n",
    "soft_q1_scheduler = optim.lr_scheduler.CosineAnnealingLR(soft_q_1_optimizer, max_iteration, eta_min=0)\n",
    "# soft_q2_scheduler = optim.lr_scheduler.CosineAnnealingLR(soft_q_2_optimizer, max_iteration, eta_min=0)\n",
    "\n",
    "\n",
    "\n",
    "# Original training\n",
    "while iteration < max_iteration:\n",
    "    # State define \n",
    "    # State => SDE를 따르는 S\n",
    "    # Action = C (Yearly Pension amount)\n",
    "    state = np.array(X0)\n",
    "    episode_reward = 0\n",
    "    \n",
    "    for t in range(t0, t0+20):\n",
    "        action = policy_net.get_action(state) # C_t\n",
    "        Z = np.random.randn()\n",
    "        # next_state, reward, done, _ = env.step(action)\n",
    "        next_state = state*np.exp(((1-pi_opt)*r + pi_opt*alpha + mu(t)- action/state \\\n",
    "                                     -pi_opt**2 * sigma**2/2)*dt + pi_opt * sigma * np.sqrt(dt) * Z)\n",
    "        \n",
    "        tmp = (10**(beta + delta*t - 10)- 10**(beta + delta*t0 - 10))/(delta * np.log(10))\n",
    "        \n",
    "        if t != t0+5:\n",
    "            reward = np.exp(-tmp)*U(C=action) # stage cost\n",
    "#             reward = U(C=action)\n",
    "            done = False\n",
    "        else:\n",
    "            state_before_rebal = state* (1+ (1-pi_opt)*r + pi_opt*alpha)\n",
    "            reward = np.exp(-tmp) * V_B(t, state_before_rebal)# Terminal cost\n",
    "#             reward = V_B(t, state_before_rebal)\n",
    "            done = True\n",
    "        \n",
    "        \n",
    "        replay_buffer.push(float(state), action, reward, float(next_state), done, t)\n",
    "        \n",
    "        if len(replay_buffer) > batch_size: # 학습이 잘되는지 살펴보고 안되면 줄여보자\n",
    "            beta = beta_by_frame(iteration)\n",
    "            loss_list = soft_q_update(batch_size, beta)\n",
    "            soft_q1_scheduler.step()\n",
    "            for i, (key, value) in enumerate(losses.items()):\n",
    "                losses[key].append(loss_list[i])\n",
    "\n",
    "        \n",
    "        state = np.array(next_state)\n",
    "        episode_reward += reward\n",
    "        iteration += 1\n",
    "        \n",
    "        if iteration % 1000 == 0:\n",
    "            plot(iteration, losses, rewards)\n",
    "        \n",
    "        if done:\n",
    "            break\n",
    "            \n",
    "    \n",
    "    rewards.append(episode_reward)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "std_loss, z_loss 수정 필요 + 기타 hyperparameter, Linear -> LSTM, GMM Policy, Replay buffer 업그레이드"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "State_stack = []\n",
    "Action_stack = []\n",
    "\n",
    "dt = 1\n",
    "\n",
    "def mu(t):\n",
    "    value = (10**(beta + delta*(t+dt) - 10)- 10**(beta + delta*t - 10))/(delta * np.log(10))\n",
    "    return value\n",
    "\n",
    "for i in range(10000):\n",
    "    state = np.array(X0)\n",
    "    states = [state]\n",
    "    actions = []\n",
    "    for t in range(t0, t0+6): # 90세까지 plot (X : 70~90, C: 70~89)\n",
    "        action = policy_net.get_action(state)\n",
    "        Z = np.random.randn()\n",
    "        \n",
    "        #  pi_opt도 dynamical하게\n",
    "        next_state = state*np.exp(((1-pi_opt)*r + pi_opt*alpha + mu(t)- action/state \\\n",
    "                                     -pi_opt**2 * sigma**2/2)*dt + pi_opt * sigma * np.sqrt(dt) * Z)\n",
    "        \n",
    "        state = np.array(next_state)\n",
    "        states.append(float(state))\n",
    "        actions.append(action)\n",
    "    State_stack.append(states)\n",
    "    Action_stack.append(actions)\n",
    "    \n",
    "Asset_mean = np.mean(State_stack, axis=0)\n",
    "C_mean = np.mean(Action_stack, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[225.         208.34856707 193.10864589 178.66389517 165.3974013\n",
      " 153.10976259 141.42398457]\n",
      "[24.123219 22.378248 20.988087 19.527466 18.117443 17.051502]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(Asset_mean)\n",
    "print(C_mean)\n",
    "\n",
    "plt.plot(range(70,76),Asset_mean[:-1])\n",
    "plt.plot(range(70,76),C_mean, '--', color = 'r')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
